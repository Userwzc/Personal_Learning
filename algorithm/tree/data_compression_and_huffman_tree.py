# 霍夫曼树是二叉树的经典应用，它是一种最优前缀编码树，常用于数据压缩
# 数据压缩算法分为两类：有损压缩和无损压缩。
# 无损压缩是指压缩后的数据可以完全复原，不会丢失任何信息
# 有损压缩是指压缩后的数据会丢失一些信息，但是压缩率高（如图片、音频、视频等多媒体文件通常采用有损压缩）
# 因为无损压缩需要保证数据可以完全还原，所以无损压缩的本质就是编码与解码
# 无损压缩的效果取决于压缩算法是否能够充分挖掘出原始数据中的冗余信息。
# 霍夫曼编码是一种通用无损压缩算法

# 定长编码 Vs 不定长编码
# ASCII编码是一种定长编码，每个字符都使用固定长度的二进制码表示（通常为8位）
# UTF-8编码是一种变长编码，不同的字符使用不同长度的二进制码表示,通常使用1到4个字节表示一个字符
# 定长编码的优势是可以[随机访问]
# 变长编码的优势是存储效率高,存储英文占用一个字节，存储中文占用三个字节
# 变长编码的难点：1.如何设计编码才能保证解码的唯一性 2.如何保证压缩率（编码数据尽可能短) 3.如何保证解码的效率
# 规律：前缀码（Prefix Code），即任何一个编码都不是另一个编码的前缀
# 霍夫曼编码就是一种变长编码方案，它借助二叉树结构构造变长编码，能够确保解码的唯一性，同时兼顾压缩效果和性能
# 每个二叉树节点的左侧树枝代表0，右侧树枝代表1，叶子节点就是每个待编码的字符，从根节点到叶子节点经过的0，1序列就是该字符的编码
# 由于每个字符都处于叶子节点，所以任意一个编码都不可能是另一个编码的前缀，必然不存在解码歧义，且解码时也不需要多余的探测逻辑，时间复杂度为O(N)
# 如何保证压缩率呢？ 取决于每个字符出现的频率
# 我们可以把每个字符出现的频率也存储到二叉树的叶子节点中，那么编码后的数据长度应该就是：叶子节点的值乘以从根节点到该叶子节点的路径长度，最后对所有叶子节点求和
# 这就是树的带权路径长度（Weighted Path Length, WPL）
# 我们想让编码后的数据长度尽可能短，其实就是寻找一颗WPL最小的二叉树，这颗树就叫做最优前缀编码树或霍夫曼树。基于这棵树计算出的编码方案就叫做霍夫曼编码
# 思想就是将频率较高的字符放在树的上层，频率较低的字符放在树的下层，从而减少编码后的数据长度